package com.omidmhebbi.parallel.advanced.practice02;


import java.util.concurrent.*;

class Producer extends Thread {
    private final BlockingQueue blockingQueue;

    Producer(BlockingQueue blockingQueue) {
        this.blockingQueue = blockingQueue;
    }

    @Override
    public void run() {
        for (int i = 0; i < 20; i++) {
            try {
            blockingQueue.add("Soup"+i);
            System.out.println("Soup"+i + " is ready");
                Thread.sleep(200);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        // because we two consumer => must send tow signal
        blockingQueue.add("EndSignal");
        blockingQueue.add("EndSignal");
    }
}

class Consumer extends Thread {
    private final BlockingQueue blockingQueue;

    Consumer(String name , BlockingQueue blockingQueue) {
        super(name);
        this.blockingQueue = blockingQueue;
    }

    @Override
    public void run() {
        while (true){
            try {
                String soupSignal = (String) blockingQueue.take();
                if(soupSignal.equals("EndSignal"))
                    break;

                System.out.println("=> I am eating " + soupSignal);
                Thread.sleep(300);
            }catch (Exception exception){
                exception.printStackTrace();
            }
        }
        System.out.println("End of "+getName()+" thread.");
    }
}

public class ProducerConsumer {
    public static void main(String[] args) {
        BlockingQueue<String> servingQueue = new ArrayBlockingQueue<String>(5);
        new Producer(servingQueue).start();
        new Consumer("Consumer 1" , servingQueue).start();// with one thread consumer full error will be generated by blocking queue

        new Consumer("Consumer 2" , servingQueue).start();


        System.out.println("The end.");
    }

}
